#https://www.youtube.com/watch?v=UC09F-yGMG4
server:
  port: 8080

spring:
  application:
    name: observ-1
  datasource:
    url: jdbc:postgresql://localhost:5432/observability
    username: ginitoru
    password: 1234
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: update

    show-sql: true

#graphana + prometheus
# https://community.grafana.com/t/what-is-the-difference-between-grafana-and-grafana-oss-in-docker-hub/71503
# https://grafana.com/docs/grafana/latest/setup-grafana/installation/kubernetes/
# https://grafana.com/grafana/dashboards/?search=spring+boot -> dashboards
# https://www.youtube.com/watch?v=_WdIlz33FKE -> scrape info from postgresql
# sql expoerter -> https://github.com/prometheus-community/postgres_exporter
#management:
#  endpoints:
#    web:
#      exposure:
#        include: health,info,prometheus, metrics
#  endpoint:
#    health:
#      probes:
#        enabled: true
#  metrics:
#    distribution:
#      percentiles-histogram:
#        all: true
#    enable:
#      all: true
#  prometheus:
#    metrics:
#      export:
#        step: 5s
#  tracing: ################# tracing Start: https://docs.spring.io/spring-boot/reference/actuator/tracing.html
#    sampling:
#      probability: 1
#    enabled: true
#  zipkin:
#    tracing:
#      endpoint: http://localhost:9411/api/v2/spans # this is the default url where the app sends spans
#  otlp: ################## logging Start:
#    logging:
#      endpoint: http://localhost:3100/loki/api/v1/push


# use open telemetry : https://www.youtube.com/watch?v=UC09F-yGMG4
management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus
  otlp:
    metrics:
      export:
        url: http://localhost:4318/v1/metrics
        step: 10s
    tracing:
      endpoint: http://localhost:4318/v1/traces
    logging:
      endpoint: http://localhost:4318/v1/logs
  tracing:
    sampling:
      probability: 1.0

  metrics:
    distribution:
      percentiles:
        do.sleep.method.timed: 0.99, 0.95, 0.9, 0.7, 0.5
        http.server.requests: 0.99, 0.95, 0.9, 0.7, 0.5
      percentiles-histogram:
        do.sleep.method.timed: true
        http.server.requests: true
      minimum-expected-value:
        do.sleep.method.timed: 100ms
        http.server.requests: 100ms
      maximum-expected-value:
        do.sleep.method.timed: 10s
        http.server.requests: 10s
      slo:
        do.sleep.method.timed: 300ms,500ms,1s,2s
        http.server.requests: 300ms,500ms,1s,2s

#https://docs.spring.io/spring-boot/reference/actuator/tracing.html#actuator.micrometer-tracing.logging
#logging:
#  pattern:
#    correlation: "[${spring.application.name:},%X{traceId:-},%X{spanId:-}] "
#  include-application-name: false


#  metrics:
#    distribution:
#      percentiles-histogram:
#        test1.timer: true
#      percentiles:
#        test1.timer: 0.9,0.99,0.5
#  observations:
#    annotations:
#      enabled: true # enables annotations @Observed @Timed etc.
#  otlp: # from here we configure the otlp
#    metrics:
#      export:
#        batch-size: 1
#        url: http://localhost:4318/v1/metrics #default
#    logging:
#      endpoint: #add here the endpoint
#  tracing:
#    sampling:
#      probability: 1 # all requests are tracked if i want 50% of request to be tracked -> 0.5
